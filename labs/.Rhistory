knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
jd <- read_json("akl.json", simplifyVector = TRUE)
str(jd)
d <- data.frame(day = as.Date(jd$daily$time),
min = jd$daily$temperature_2m_min,
max = jd$daily$temperature_2m_max)
str(d)
sum(is.na(d))
summary(d)
d$year <- as.integer(format(d$day, "%Y"))
d$avg <- (d$min + d$max) / 2
avg <- aggregate(avg ~ year, data=d, FUN=mean)
str(avg)
train <- subset(avg, year <= 2014)
test <- subset(avg, year > 2014)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test))
linear_pred <- predict(linear_model, test)
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
cat("RMSE for mean:", fill=T)
rmse(test$avg, mean_pred)
cat("RMSE for linear model:", fill=T)
rmse(test$avg, linear_pred)
plot(avg ~ year, data=avg, type='l',
xlab='Year', ylab='Annual Avg Temperature')
abline(h=mean_model, col='blue')
abline(linear_model, col='red')
abline(v=test$year[1], lty=2)
tail(test, 4)
hist(test$avg)
d$month <- as.integer(format(d$day, "%m"))
avg2 <- avg
avg2[avg2$year==2022,]$avg <- mean(c(mean(subset(d, year == 2022)$avg), mean(subset(d, year > 2014 & month > 6)$avg)))
test2 <- subset(avg2, year > 2014)
tail(test2, 4)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test2))
linear_pred <- predict(linear_model, test2)
cat("RMSE for mean:", fill=T)
rmse(test2$avg, mean_pred)
cat("RMSE for linear model:", fill=T)
rmse(test2$avg, linear_pred)
plot(avg ~ year, data=avg2, type='l',
xlab='Year', ylab='Annual Avg Temperature')
abline(h=mean_model, col='blue')
abline(linear_model, col='red')
abline(v=test2$year[1], lty=2)
library(xml2)
xmlpage <- read_html(url("https://stat.auckland.ac.nz/~su/769/demo/nzcities.html"))
table <- xml_find_first(xmlpage, "//table")
fieldnames <- xml_text(xml_find_all(table, ".//th"))
fields <- xml_text(xml_find_all(table, ".//td"))
fieldmat <- matrix(fields, byrow=TRUE, ncol=length(fieldnames))
cities <- as.data.frame(fieldmat)
names(cities) <- fieldnames
cities$lat <- as.numeric(cities$lat)
cities$lng <- as.numeric(cities$lng)
cities$population <- as.integer(cities$population)
cities$population_proper <- as.integer(cities$population_proper)
str(cities)
most_populous <- head(cities[rev(order(cities$population)),], 5)
fetch_city <- function(city) {
df <- fromJSON(url(paste0('https://archive-api.open-meteo.com/v1/era5?latitude=', city["lat"],
'&longitude=', city["lng"],
'&start_date=', '2021-01-01',
'&end_date=', '2021-12-31',
'&daily=temperature_2m_max&timezone=Pacific%2FAuckland')))
df$daily$temperature_2m_max
}
max.temperature = apply(most_populous, 1, FUN=fetch_city)
matplot(max.temperature, type='l', lty=1, xaxt="n", xlab="Day")
legend("bottomleft", legend=unique(most_populous$city), col = 1:5, lty=1)
axis(1, at=seq(1, 365, by=60), labels=c("Jan", "Mar", "May", "Jul", "Sep", "Nov", "Jan"))
xmlpage <- read_html(url("https://stat.auckland.ac.nz/~su/769/demo/nzcities.html"))
library(xlm2)
library(xml2)
xmlpage <- read_html(url("https://stat.auckland.ac.nz/~su/769/demo/nzcities.html"))
str(xmlpage)
summary(data.frame(x=1:5, y=1:4, z=c(1,2,3,4,NA)))
summary(data.frame(x=1:5, y=1:5, z=c(1,2,3,4,NA)))
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
jd <- read_json("akl.json", simplifyVector = TRUE)
str(jd)
d <- data.frame(day = as.Date(jd$daily$time),
min = jd$daily$temperature_2m_min,
max = jd$daily$temperature_2m_max)
str(d)
summary(d)
d$year <- as.integer(format(d$day, "%Y"))
d$avg <- (d$min + d$max) / 2
avg <- aggregate(avg ~ year, data=d, FUN=mean)
str(avg)
train <- subset(avg, year <= 2014)
test <- subset(avg, year > 2014)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test))
linear_pred <- predict(linear_model, test)
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
cat("RMSE for mean:", fill=T)
rmse(test$avg, mean_pred)
cat("RMSE for linear model:", fill=T)
rmse(test$avg, linear_pred)
plot(avg ~ year, data=avg, type='l',
xlab='Year', ylab='Annual Avg Temperature')
abline(h=mean_model, col='blue')
abline(linear_model, col='red')
abline(v=test$year[1], lty=2)
tail(test, 4)
hist(test$avg)
d$month <- as.integer(format(d$day, "%m"))
avg2 <- avg
avg2[avg2$year==2022,]$avg <- mean(c(mean(subset(d, year == 2022)$avg), mean(subset(d, year > 2014 & month > 6)$avg)))
test2 <- subset(avg2, year > 2014)
tail(test2, 4)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test2))
linear_pred <- predict(linear_model, test2)
cat("RMSE for mean:", fill=T)
rmse(test2$avg, mean_pred)
cat("RMSE for linear model:", fill=T)
rmse(test2$avg, linear_pred)
plot(avg ~ year, data=avg2, type='l',
xlab='Year', ylab='Annual Avg Temperature')
abline(h=mean_model, col='blue')
abline(linear_model, col='red')
abline(v=test2$year[1], lty=2)
library(xml2)
xmlpage <- read_html(url("https://stat.auckland.ac.nz/~su/769/demo/nzcities.html"))
table <- xml_find_first(xmlpage, "//table")
fieldnames <- xml_text(xml_find_all(table, ".//th"))
fields <- xml_text(xml_find_all(table, ".//td"))
fieldmat <- matrix(fields, byrow=TRUE, ncol=length(fieldnames))
cities <- as.data.frame(fieldmat)
names(cities) <- fieldnames
cities$lat <- as.numeric(cities$lat)
cities$lng <- as.numeric(cities$lng)
cities$population <- as.integer(cities$population)
cities$population_proper <- as.integer(cities$population_proper)
str(cities)
most_populous <- head(cities[rev(order(cities$population)),], 5)
fetch_city <- function(city) {
df <- fromJSON(url(paste0('https://archive-api.open-meteo.com/v1/era5?latitude=', city["lat"],
'&longitude=', city["lng"],
'&start_date=', '2021-01-01',
'&end_date=', '2021-12-31',
'&daily=temperature_2m_max&timezone=Pacific%2FAuckland')))
df$daily$temperature_2m_max
}
max.temperature = apply(most_populous, 1, FUN=fetch_city)
matplot(max.temperature, type='l', lty=1, xaxt="n", xlab="Day")
legend("bottomleft", legend=unique(most_populous$city), col = 1:5, lty=1)
axis(1, at=seq(1, 365, by=60), labels=c("Jan", "Mar", "May", "Jul", "Sep", "Nov", "Jan"))
tail(test, 4)
hist(test$avg)
tail(test, 4)
hist(avg$avg)
tail(test, 4)
hist(avg$avg)
aggregate(day ~ ., data = d, FUN=count)
tail(test, 4)
hist(avg$avg)
aggregate(day ~ ., data = d, FUN=n)
tail(test, 4)
hist(avg$avg)
aggregate(day ~ ., data = d, FUN=nrow)
d$year <- as.integer(format(d$day, "%Y"))
d$month <- as.integer(format(d$day, "%m"))
d$avg <- (d$min + d$max) / 2
avg <- aggregate(avg ~ year, data=d, FUN=mean)
str(avg)
tail(test, 4)
hist(avg$avg)
aggregate(month ~ ., data = d, FUN=nrow)
d$year <- as.integer(format(d$day, "%Y"))
d$month <- as.integer(format(d$day, "%m"))
d$avg <- (d$min + d$max) / 2
avg <- aggregate(avg ~ year, data=d, FUN=mean)
str(avg)
str(d)
d$year <- as.integer(format(d$day, "%Y"))
d$month <- as.integer(format(d$day, "%m"))
d$avg <- (d$min + d$max) / 2
avg <- aggregate(avg ~ year, data=d, FUN=mean)
str(avg)
tail(test, 4)
hist(avg$avg)
aggregate(. ~ month, data = d, FUN=nrow)
tail(test, 4)
hist(avg$avg)
aggregate(avg ~ month, data = d, FUN=nrow)
tail(test, 4)
hist(avg$avg)
aggregate(min ~ month, data = d, FUN=nrow)
tail(test, 4)
hist(avg$avg)
aggregate(min ~ month, data = d, FUN=length)
tail(test, 4)
hist(avg$avg)
aggregate(min ~ year, data = d, FUN=length)
tail(test, 4)
hist(avg$avg)
summary(aggregate(min ~ year, data = d, FUN=length))
summary(aggregate(min + max ~ year, data = d, FUN=length))
d$month <- as.integer(format(d$day, "%m"))
avg2 <- avg
avg2[avg2$year==2022,]$avg <- mean(c(mean(subset(d, year == 2022)$avg), mean(subset(d, year > 2014 & month > 6)$avg)))
test2 <- subset(avg2, year > 2014)
tail(test2, 4)
avg2 <- subset(avg, avg$year != 2022)
avg2 <- subset(avg, year != 2022)
str(avg2)
avg2 <- subset(avg, year < 2022)
str(avg2)
avg2 <- subset(avg, year < 2022)
summary(avg2)
avg2 <- subset(avg, year < 2022)
train2 <- subset(avg2, year <= 2014)
test2 <- subset(avg2, year > 2014)
summary(avg2)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test2))
linear_pred <- predict(linear_model, test2)
cat("RMSE for mean:", fill=T)
rmse(test2$avg, mean_pred)
cat("RMSE for linear model:", fill=T)
rmse(test2$avg, linear_pred)
plot(avg ~ year, data=avg2, type='l',
xlab='Year', ylab='Annual Avg Temperature')
abline(h=mean_model, col='blue')
abline(linear_model, col='red')
abline(v=test2$year[1], lty=2)
summary(aggregate(min + max ~ year, data = d, FUN=nrow))
summary(aggregate(min + max ~ year, data = d, FUN=length))
summary(aggregate(min * max ~ year, data = d, FUN=length))
summary(aggregate(min + max ~ year, data = d, FUN=length))
knitr::opts_chunk$set(echo = TRUE)
train <- subset(avg, year <= 2014)
test <- subset(avg, year > 2014)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test))
linear_pred <- predict(linear_model, test)
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
cat("RMSE for mean:", rmse(test$avg, mean_pred), fill=T)
cat("RMSE for linear model:", rmse(test$avg, linear_pred), fill=T)
mean_model <- mean(train$avg)
linear_model <- lm(avg ~ year, data=train)
mean_pred <- rep(mean_model, nrow(test2))
linear_pred <- predict(linear_model, test2)
cat("RMSE for mean:", rmse(test2$avg, mean_pred), fill=T)
cat("RMSE for linear model:", rmse(test2$avg, linear_pred), fill=T)
