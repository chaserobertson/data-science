ls()
pickup <- read.csv("/course/users/crob873/lab-4/pickup-2010-01-08.txt", header=FALSE)
names(pickup) <- c("time", "lon", "lat")
str(pickup)
table(substr(pickup$time, 0, 10))
plot(lon ~ lat, data=pickup)
pickup <- subset(pickup, 40.4 <= lat & lat <= 41.1 & -74.5 <= lon & lon <= -73.5)
by_hour <- lapply(0:23, FUN = function(x) subset(pickup, as.integer(substr(time, 12, 13)) == x))
plot(1:24, sapply(by_hour, nrow))
fs <- read.csv("/course/data/fsquare/dataset_TIST2015_POIs.txt")
str(fs)
fs <- readr::read_csv("/course/data/fsquare/dataset_TIST2015_POIs.txt", delim="\t")
?reader::read_csv
?readr::read_csv
fs <- readr::read_tsv("/course/data/fsquare/dataset_TIST2015_POIs.txt")
str(fs)
q()
fs <- readr::read_tsv("/course/data/fsquare/dataset_TIST2015_POIs.txt", col_names=c("id", "lat", "lon", "type", "country"))
str(fs)
fs <- readr::read_tsv("/course/data/fsquare/dataset_TIST2015_POIs.txt", col_names=c("id", "lat", "lon", "type", "country"), show_col_types=FALSE)
str(fs)
by_hour
ls
ls()
clear()
str(by_hour)
str(by_hour[8])
str(by_hour[9])
str(fs)
x = by_hour[9][1,]
x = by_hour[9][1]
str(x)
x = by_hour[9][[1]]
str(x)
x = by_hour[[9]]
str(x)
x = by_hour[[9]][1,]
str(x)
dist = sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2)
str(dist)
which.min(dist)
dist[1752884]
closest <- rep(0, nrow(by_hour[[9]]))
str(closest)
apply(by_hour[[9]][1:3,], axis=1, FUN=function(x) {which.min(sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2))}
)
apply(by_hour[[9]][1:3,], margin=1, FUN=function(x) {which.min(sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2))})
apply(by_hour[[9]][1:3,], MARGIN=1, FUN=function(x) {which.min(sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2))})
apply(by_hour[[9]][1:3,], MARGIN=2, FUN=function(x) {which.min(sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2))})
sapply(by_hour[[9]][1:3,], MARGIN=1, FUN=function(x) {which.min(sqrt((x$lon - fs$lon)^2 + (x$lat - fs$lat)^2))})
apply(by_hour[[9]][1:3,], MARGIN=2, FUN=function(x) {which.min(sqrt((x["lon"] - fs$lon)^2 + (x["lat"] - fs$lat)^2))})
apply(by_hour[[9]][1:3,], MARGIN=1, FUN=function(x) {which.min(sqrt((x["lon"] - fs$lon)^2 + (x["lat"] - fs$lat)^2))})
apply(by_hour[[9]][1:3,], MARGIN=1, FUN=function(x) {x["lat"]})
apply(by_hour[[9]][1:3,], MARGIN=1, FUN=function(x) {x["lat"] + x["lon"]})
str(fs)
str(by_hour[[9]])
str(by_hour[[9]][1,)
str(by_hour[[9]][1,])
as.vector(by_hour[[9]][1,])
str(as.vector(by_hour[[9]][1,]))
pickups
pickups <- by_hour[[9]]
small_fs <- fs[1:10,]
small_fs
apply([1:3,], MARGIN=1, FUN=function(x) {x["lat"] + x["lon"]})
apply(pickups[1:3,], MARGIN=1, FUN=function(x) {which.min(sqrt((x["lon"] - small_fs$lon)^2 + (x["lat"] - small_fs$lat)^2))})
dist <- function(x, y) { sqrt((x["lon"] - y["lon"])^2 + (x["lat"] - y["lat"])^2) }
dist(pickups[1,], small_fs[1,])
apply(pickups[1:3,], MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) })
apply(pickups[1:3,], MARGIN=1, FUN=function(x) { str(x) })
dist <- function(x, y) { sqrt((as.numeric(x["lon"]) - y["lon"])^2 + (as.numeric(x["lat"]) - y["lat"])^2) }
dist(pickups[1,], small_fs[1,])
apply(pickups[1:3,], MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) })
dist <- function(x, y) { sqrt((as.numeric(x["lon"]) - y$lon)^2 + (as.numeric(x["lat"]) - y$lat)^2) }
dist(pickups[1,], small_fs[1,])
apply(pickups[1:3,], MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) })
x
small_fx
small_fs
apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) })
mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) })
mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs)) })
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, small_fs)) }))
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs[1:100,])) }))
str(mins)
str(pickups)
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs[1:10,])) }))
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs[1:10,])) }))
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs[1,])) }))
str(mins)
dist(pickups[1:2], fs[1:2])
dist(pickups[1], fs[1:2])
dist(pickups[1], fs[1:2,])
dist(pickups[1,], fs[1:2,])
str(dist(pickups[1,], fs[1:2,]))
do.call(dist, pickups[1:2,], fs[1:2,])
do.call(function(x, y,...) dist(x,y), pickups[1:2,], fs[1:2,])
do.call(dist, list(x=pickups[1:2,], y=fs[1:2,]))
do.call("dist", list(x=pickups[1:2,], y=fs[1:2,]))
do.call("dist", x=pickups[1:2,], y=fs[1:2,])
system.time(mins <- apply(pickups, MARGIN=1, FUN=function(x) { which.min(dist(x, fs[1:10,])) }))
str(mins)
max(fs[,"lat"])
min(fs[,"lon"])
small_fs <- subset(fs, min(pickups$lat) -1 < lat, lat < max(pickups$lat) + 1, min(pickups$lon) - 1 < lon, lon < max(pickups$lon) + 1)
str(fs)
small_fs <- subset(fs, min(pickups$lat) -1 < lat, lat < max(pickups$lat) + 1, min(pickups$lon) - 1 < lon, lon < max(pickups$lon) + 1)
small_fs <- subset(fs, min(pickups$lat) -1 < fs$lat, fs$lat < max(pickups$lat) + 1, min(pickups$lon) - 1 < fs$lon, fs$lon < max(pickups$lon) + 1)
q()
ls()
str(fs)
str(by_hour)
ls()
str(pickups)
eight <- pickup[[9]]
eight <- pickups[[9]]
eight <- pickups[9]
str(pickups)
eight <- by_hour[[9]]
str(eight)
dist <- function(lat1, lon1, lat2, lon2) { sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2) }
dist(1, 1, 2, 2)
dist(1, 1, 2, 2)^2
x = eight[1,c("lat","lon")]
x
y = fs[1,c("lat","lon")]
y
dist(x[1],x[2], y[1],y[2])
as.numeric(dist(x[1],x[2], y[1],y[2]))
dist <- function(x1, y1, x2, y2) { 
    as.numeric(sqrt((x1 - x2)^2 + (y1 - y2)^2))
}
dist(x[1],x[2], y[1],y[2])
dist(x[1],x[2], fs["lat"],fs["lon"])[1:5]
dist(x[1],x[2], fs[,"lat"],fs[,"lon"])[1:5]
dist(x[1],x[2], fs$lat,fs$lon)[1:5]
str(fs$lat)
x[1]
x = as.numeric(eight[1,c("lat","lon")])
x
dist(x[1],x[2], fs$lat,fs$lon)[1:5]
which.min(dist(x[1],x[2], fs$lat,fs$lon))
x
fs[1752884]
fs[1752884,]
nearest <- function(x, locs) { which.min(dist(x$lat, x$lon, locs$lat, locs$lon)) }
nearest(x, fs)
nearest <- function(x, locs) { which.min(dist(x["lat"], x["lon"], locs$lat, locs$lon)) }
nearest(x, fs)
nearest <- function(x, locs) { dist(x["lat"], x["lon"], locs$lat, locs$lon) }
nearest(x, fs)[1:5]
x
x = eight[1,c("lat","lon")]
x = eight[1,]
nearest(x, fs)[1:5]
nearest <- function(x, locs) { dist(x[1], x[2], locs$lat, locs$lon) }
nearest(x, fs)[1:5]
nearest <- function(x, locs) { which.min(dist(x[1], x[2], locs$lat, locs$lon)) }
nearest(x, fs)[1:5]
nearest(x, fs)
nearest
nearest(c(1,1), data.frame(lat=2,lon=2))
nearest(c(1,1), data.frame(lat=c(2,3),lon=c(4,2)))
str(fs)
fs <- readr::read_tsv("/course/data/fsquare/dataset_TIST2015_POIs.txt", col_names=c("id", "lat", "lon", "type", "country"), show_col_types=FALSE, lazy=F)
str(fs)
nearest(x, fs)
lat = fs$lat
str(lat)
lon = fs$lon
str(lon)
nearest(x, fs[,c("lat","lon"))
nearest(x, fs[,c("lat","lon")])
nearest(x, data.frame(lat,lon))
nearest <- function(x, lat, lon) { which.min(dist(x[1], x[2], lat, lon)) }
nearest(x, lat, lon)
str(x)
nearest <- function(x, locs) { which.min(dist(x["lat"], x["lon"], locs$lat, locs$lon)) }
nearest(x, fs)
nearest(x[,c("lat","lon")], fs)
nearest(eight[1,c("lat","lon")], fs)
nearest(eight[10, c("lat","lon")], fs)
nearest(eight[10, c("lat","lon")], fs$lat, fs$lon)
nearest <- function(x, y, lat, lon) { which.min(dist(x, y, lat, lon)) }
nearest(eight[10, "lat"], eight[10, "lon"], fs$lat, fs$lon)
nearest(eight[100, "lat"], eight[100, "lon"], fs$lat, fs$lon)fs <- readr::read_tsv("/course/data/fsquare/dataset_TIST2015_POIs.txt", col_names=c("id", "lat", "lon", "type", "country"), show_col_types=FALSE)
nearest <- function(lat1, lon1, lat2, lon2) { 
    which.min(sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2))
}
nearest(1,1,2,2)
nearest(1,1,3,3)
nearest(1,1,c(2,3,4),c(8,9,2))
import(parallel)
library(parallel)
eight_lat = eight$lat
eight_lon = eight$lon
mapply(nearest, eight_lat[1:5], eight_lon[1:5], fs$lat, fs$lon)
nearest(1,1,c(2,3,4),c(8,9,2))
nearest <- function(lat, lon) { 
    which.min(sqrt((lat - fs$lat)^2 + (lon - fs$lon)^2))
}
nearest
mapply(nearest, eight_lat[1:5], eight_lon[1:5])
system.time(nearest_fs <- mapply(nearest, eight_lat[1:5], eight_lon[1:5]))
nearest_fs
system.time(nearest_fs <- mclapply(nearest, eight_lat[1:5], eight_lon[1:5]))
nearest_fs
mapply(eight[1:5,], FUN=nearest)
mapply(eight[1:5, c("lat","lon")], FUN=nearest)
nearest <- function(x, fs) { 
    which.min(sqrt((x["lat"] - fs$lat)^2 + (x["lon"] - fs$lon)^2))
}
mapply(eight[1:5, c("lat","lon")], FUN=nearest)
mapply(eight[1:5, c("lat","lon")], fs, FUN=nearest)
nearest <- function(x) { 
    which.min(sqrt((x["lat"] - fs$lat)^2 + (x["lon"] - fs$lon)^2))
}
mapply(eight[1:5, c("lat","lon")], FUN=nearest)
lapply(eight[1:5, c("lat","lon")], FUN=nearest)
lapply(eight[1:5,], FUN=print)
lapply(eight[1:2,], FUN=print)
str(lapply(eight[1:2,], FUN=print))
lapply(eight[1:2,], margin=2, FUN=print)
lapply(eight[1:2,], margin=1, FUN=print)
lapply(head(eight), margin=1, FUN=print)
str(x)
x = x[c("lon","lat")]
x
str(x)
lapply(x, FUN=print)
lapply(x, FUN=str)
x = eight[1:5, c("lon","lat")]
lapply(x, FUN=str)
lapply(x, margin=1, FUN=str)
lapply(x, MARGIN=1, FUN=str)
lapply(x, MARGIN=2, FUN=str)
apply(x, MARGIN=2, FUN=str)
apply(x, MARGIN=1, FUN=str)
lapply(x, MARGIN=1, FUN=str)
str(eight)
str(fs)
nearest
?hav
source("/course/data/code/hav.R")
?hav
nearest <- function(x, y) { 
    which.min(hav(x, y))
}
nearest(c(1, 1), c(2, 2))
nearest(eight[1:5,c("lat", "lon"), fs[1:5,c("lat","lon"))
nearest(eight[1:5,c("lat", "lon")], fs[1:5,c("lat","lon")])
eight[1:5,c("lat", "lon")]
fs[1:5,c("lat", "lon")]
str(fs[1:5,c("lat", "lon")])
str(eight[1:5,c("lat", "lon")])
fs = as.data.frame(fs)
str(fs)
nearest(eight[1:5,c("lat", "lon")], fs[1:5,c("lat","lon")])
nearest(eight[1,c("lat", "lon")], fs[1:5,c("lat","lon")])
nearest(eight[1:5,c("lat", "lon")], fs[1,c("lat","lon")])
nearest(eight[1:5,c("lat", "lon")], fs[,c("lat","lon")][1])
nearest(eight[1:5,c("lat", "lon")], fs[,c("lat","lon")][1,])
nearest(as.numeric(eight[1,c("lat","lon")]), fs[,c("lat","lon")])
nearest(fs[,c("lat","lon")], as.numeric(eight[1,c("lat","lon")]))
nearest(fs[,c("lat","lon")], as.numeric(eight[2,c("lat","lon")]))
fs_nearest <- function(x) { 
    which.min(hav(fs, x))
}
fs_nearest(as.numeric(eight[2,c("lat","lon")]))
fs_nearest(as.numeric(eight[2, c("lat","lon")]))
eight <- as.numeric(by_hour[[9]][,c("lat","lon")])
str(by_hour[[9]][,c("lat","lon")])
eight <- as.matrix(by_hour[[9]][,c("lat","lon")])
str(eight)
eight[1]
eight[1,]
eight[2,]
eight <- as.matrix(subset(by_hour[[9]], select=c("lat", "lon")))
fs_dists <- as.matrix(subset(fs, select=c("lat", "lon")))
str(eight)
str(fs_dists)
eight <- as.matrix.data.frame(subset(by_hour[[9]], select=c("lat", "lon")))
str(eight)
str(subset(by_hour[[9]], select=c("lat", "lon")))
eight <- data.matrix(subset(by_hour[[9]], select=c("lat", "lon")))
str(eight)
fs_dists <- data.matrix(subset(fs, select=c("lat", "lon")))
nearest <- function(many, one) { 
    which.min(hav(many, one))
}
nearest(fs_dists, eight[1])
nearest(fs_dists, eight[2,])
nearest(fs_dists, eight[1,])
m1 <- data.matrix(subset(by_hour[[9]], select=c("lat", "lon")))
m2 <- data.matrix(subset(fs, select=c("lat", "lon")))
source("/course/data/code/hav.R")
l <- lapply(1:20, function(i) which.min(hav(m2, m1[i,])))
str(l)
system.time(l <- mclapply(1:20, function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
str(l)
system.time(l <- mclapply(1:200, function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
system.time(l <- lapply(1:20, function(i) which.min(hav(m2, m1[i,]))))
system.time(l <- mclapply(1:20, function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
nrow(m1)
q()
nrow(m1)
system.time(l <- mclapply(1:20, function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
library(parallel)
system.time(l <- mclapply(1:20, function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
system.time(l <- mclapply(seq_along(m1), function(i) which.min(hav(m2, m1[i,])), mc.cores=20))
fs_nyc <- subset(fs, 40.4 <= lat & lat <= 41.1 & -74.5 <= lon & lon <= -73.5)
m1 <- data.matrix(subset(by_hour[[9]], select=c("lat", "lon")))
m2 <- data.matrix(subset(fs_nyc, select=c("lat", "lon")))
system.time(l <- lapply(1:20, function(i) which.min(hav(m2, m1[i,]))))
system.time(l <- mclapply(seq_along(m1), function(i) which.min(hav(m2, m1[i,])), mc.cores=10))
str(l)
system.time(l <- mclapply(1:nrow(m1), function(i) which.min(hav(m2, m1[i,])), mc.cores=10))
makeCluster(10)
clusterExport(m1, m2)
clusterExport(hav)
clusterEvalQ(ls())
stopCluster()
c <- makeCluster(10)
c
clusterEvalQ(ls)
clusterEvalQ(c, ls)
clusterEvalQ(c, ls())
clusterExport(c, m1, m2)
clusterExport(c, c(m1, m2))
clusterExport(m1)
clusterExport(c)
clusterExport(c, list(m1, m2))
c
clusterExport(c, m1)
clusterExport(c, m1m1)
clusterExport(c, m1=m1)
clusterExport(c, list(m1))
str(m1)
clusterExport(c, list(m1=m1))
clusterExport(c, list('m1'=m1))
clusterExport(c, c('m1', 'm2', 'hav'))
str(c)
c1 = c
clusterEvalQ(ls())
clusterEvalQ(c1, ls())
clusterApply(c1, 1:5, function(i) which.min(hav(m2, m1[i,])))
clusterApply(c1, 1:5, function(i) which.min(hav(m2, m1[i,])))
l[1:5]
l[[1]
]
str(l[[1]])
system.time(print(1), print(2))
c1
system.time(l <- clusterApply(c1, 1:nrow(m1), function(i) which.min(hav(m2, m1[i,]))))
stopCluster(c1)
system.time(
    c1 <- makeCluster(10),
    clusterExport(c1, c('m1', 'm2', 'hav')),
    l <- clusterApply(c1, 1:nrow(m1), function(i) which.min(hav(m2, m1[i,]))),
    stopCluster(c1)
)
system.time(print(1), print(2), print(3), print(4))
system.time(print(1); print(2); print(3);)
system.time({
    c1 <- makeCluster(10);
    clusterExport(c1, c('m1', 'm2', 'hav'));
    l <- clusterApply(c1, 1:nrow(m1), function(i) which.min(hav(m2, m1[i,])));
    stopCluster(c1)
})
m3 <- data.matrix(subset(by_hour[[21]], select=c("lat", "lon")))
str(m3)
str(by_hour[[21]])
str(l)
m3 <- data.matrix(subset(by_hour[[21]], select=c("lat", "lon")))
system.time({
    c1 <- makeCluster(10);
    clusterExport(c1, c('m3', 'm2', 'hav'));
    l2 <- clusterApply(c1, 1:nrow(m3), function(i) which.min(hav(m2, m3[i,])));
    stopCluster(c1)
})
str(l2)
table(l2)
l2[1:3]
str(unlist(l2))
str(unlist(l))
fs[51073]
fs[51073,]
fs[1752884,]
by_hour[[9]][1,]
str(fs[l,])
str(fs[unlist(l),])
summary(fs[unlist(l),]$lat)
summary(fs[names(l),]$lat)
summary(fs[names(unlist(l)),]$lat)
l1_nearest <- fs_nyc[names(unlist(l)), ]
summary(l1_nearest)
str(fs)
str(fs_nyc)
l1_nearest <- fs_nyc[names(unlist(l)), ]
l2_nearest <- fs_nyc[names(unlist(l2)), ]
table(l1_nearest$type)
table(l2_nearest$type)
table(l2_nearest$type, deparse.level=0)
table(l2_nearest$type, deparse.level=2)
t2 <- table(l2_nearest$type)
t2
str(t2)
t1 <- table(l1_nearest$type)
str(t1)
t1 <- table(tail(strsplit(l1_nearest$type, split=" ")[[1]],1))
str(t1)
t1
str(strsplit(l1_nearest$type, split=" "))
str(tail(strsplit(l1_nearest$type, split=" ")), 1)
l1_nearest$type
str(unlist(strsplit(l1_nearest$type, split=" "))
)
lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1))
table(lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1)))
str(lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1)))
unlist(lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1)))
table(unlist(lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1))))
table(unlist(lapply(strsplit(l2_nearest$type, split=" "), function(x) tail(x, 1))))
l2_types <- unlist(lapply(strsplit(l2_nearest$type, split=" "), function(x) tail(x, 1)))
table(sort(l2_types))
table(l2_types[order(l2_types)])
table(l2_types[order(as.numeric(l2_types))])
table(l2_types[order(l2_types, decreasing=T)])
t2 <- table(l2_types)
t2[order(t2, decreasing=T)]
l1_nearest <- fs_nyc[names(unlist(l)), ]
# get last word of each type (to collapse different subtypes)
l1_types <- unlist(lapply(strsplit(l1_nearest$type, split=" "), function(x) tail(x, 1)))
t1 <- table(l1_types)
t1[order(t1, decreasing = TRUE)]
l2_nearest <- fs_nyc[names(unlist(l2)), ]
# get last word of each type (to collapse different subtypes)
l2_types <- unlist(lapply(strsplit(l2_nearest$type, split=" "), function(x) tail(x, 1)))
t2 <- table(l2_types)
t2[order(t2, decreasing = TRUE)]
head(t1[order(t1, decreasing = TRUE)], 10)
head(t1[order(t1, decreasing = TRUE)], 20)
head(t2[order(t2, decreasing = TRUE)], 20)
head(table(l2_nearest$type)[order(table(l2_nearest$type), decreasing=T)], 20)
t1 <- table(l1_nearest$type)
head(t1[order(t1, decreasing = TRUE)], 15)
t2 <- table(l2_nearest$type)
head(t2[order(t2, decreasing = TRUE)], 15)
head(t2[order(t2, decreasing = TRUE)], 20)
head(t1[order(t1, decreasing = TRUE)], 20)
head(t2[order(t2, decreasing = TRUE)], 20)
q()
system.time(l <- mclapply(1:nrow(m1), function(i) which.min(hav(m2, m1[i,])), mc.cores=10))
library(parallel)
system.time(l <- mclapply(1:nrow(m1), function(i) which.min(hav(m2, m1[i,])), mc.cores=10))
system.time({
    c1 <- makeCluster(10);
    clusterExport(c1, c('m1', 'm2', 'hav'));
    l <- clusterApply(c1, 1:nrow(m1), function(i) which.min(hav(m2, m1[i,])));
    stopCluster(c1)
})
l1_nearest <- fs_nyc[names(unlist(l)), ]
t1 <- table(l1_nearest$type)
head(t1[order(t1, decreasing = TRUE)], 20)
q()
l1_nearest <- fs_nyc[names(unlist(l)), ]
t1 <- table(l1_nearest$type)
t1
print(t1[order(t1, decreasing=T)])
l1_nearest <- fs_nyc[names(l), ]
l1_nearest
l1_nearest <- fs_nyc[names(unlist(l)), ]
l1_nearest
names(unlist(l))
as.integer(names(unlist(l)))
l1_nearest <- fs_nyc[as.integer(names(unlist(l))), ]
t1 <- table(l1_nearest$type)
head(t1[order(t1, decreasing = TRUE)], 20)
version()
q()
str(l)
str(unlist(l))
fs_nyc[unlist(l),][1:4,]
q()
